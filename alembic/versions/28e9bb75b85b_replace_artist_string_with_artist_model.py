"""Replace artist string with Artist model

Revision ID: 28e9bb75b85b
Revises: 1ad091650951
Create Date: 2025-07-01 14:34:23.523006

"""
from typing import Sequence, Union

import sqlmodel
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '28e9bb75b85b'
down_revision: Union[str, Sequence[str], None] = '1ad091650951'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'artist',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, unique=True),
        sa.PrimaryKeyConstraint('id')
    )

    op.add_column(
        'song',
        sa.Column('artist_id', sa.Integer(), nullable=True)
    )
    op.create_foreign_key(
        None,
        'song',
        'artist',
        ['artist_id'],
        ['id']
    )

    # Backfill artist data
    connection = op.get_bind()
    song_table = sa.table(
        'song',
        sa.column('id', sa.Integer),
        sa.column('artist', sa.String),
        sa.column('artist_id', sa.Integer)
    )
    artist_table = sa.table(
        'artist',
        sa.column('id', sa.Integer),
        sa.column('name', sa.String)
    )

    # Get unique artist names
    artist_names = connection.execute(sa.select(song_table.c.artist).distinct()).fetchall()
    name_to_id = {}

    for (name,) in artist_names:
        result = connection.execute(
            artist_table.insert().values(name=name).returning(artist_table.c.id)
        )
        artist_id = result.scalar()
        name_to_id[name] = artist_id

    # Update songs with artist_id
    for name, artist_id in name_to_id.items():
        connection.execute(
            song_table.update().where(song_table.c.artist == name).values(artist_id=artist_id)
        )

    # Step 4: Drop old artist column & make artist_id non-nullable
    op.drop_column('song', 'artist')
    op.alter_column('song', 'artist_id', nullable=False)

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('song', sa.Column('artist', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'song', type_='foreignkey')
    op.drop_column('song', 'artist_id')
    op.drop_table('artist')
    # ### end Alembic commands ###
